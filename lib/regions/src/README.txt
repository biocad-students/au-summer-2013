**************************************************************************************************************
**************************************************************************************************************
ОПИСАНИЕ УТИЛИТ

./regions - выравнивает файл с ридами на файл с гермлайнами. Одновременно может выравнивать только один файл с ридами только на один файл с гермлайнами. Поэтому для выравнивания на три отдельных файла с гермлайнами для V, D и J генов потребуется 3 отдельных запуска утилиты. Затем результаты трех запусков обрабатываются утилитой ./regions_assembler, которая выдает итоговую разметку на гены для ридов.

./regions_assembler - обрабатывает результаты запуска ./regions для V, D и J генов, выбирая выравнивание с максимальным score из нескольких возможных для данного рида. Для каждого рида выбирается наилучшее выравнивания на V, D и J гены (итого 3 наилучших вырванивания по одному на каждый ген). Результат затем выводится в results.txt в следующем формате:

#name              v_start    v_end          d_start    d_end     j_start     j_end
sequence_1      1             180             181        189         190         200

sequence_1 - это название рида. Если для какого-то гена не было файла с гермлайнами, или не нашлось ни одного выравнивания, то на месте ?_start и ?_end в соответствующей позиции ставится прочерк. 

**************************************************************************************************************
**************************************************************************************************************
СБОРКА

Для сборки понадобятся следующие утилиты и библиотеки:
- компилятор с поддержкой C++11 и OpenMP (GCC 4.6 и выше. Clang не подойдет, так как не поддерживает OpenMP. Проект соберется, но будет работать в один поток вместо 4-8)
- cmake
- log4cxx
- boost
- google test (aka gtest)
- intel thread building blocks (tbb)

Процесс сборки заключается в запуске ./compile.sh в директории проекта. Если что-то пошло не так, все промежуточные файлы удаляются скриптом ./clean_all.sh. В результате в папке bin каждого проекта появятся все необходимые бинарники и файлы с конфигами. При сборке все конфиги берутся из ./src/config и копируются в ./bin/config, поэтому при запуске утилиты все данные берутся из ./bin/config. Относительно бинарников все конфиги должны лежать в папке ./config. Итого, сборка проекта состоит из следующих шагов:

cd ./regions
./compile.sh
cd ../regions_assembler
./compile.sh
cd ..

**************************************************************************************************************
**************************************************************************************************************
КОНФИГУРИРОВАНИЕ
Этот этап является необязательным, так как есть скрипт ./run.sh, который все сконфигурирует за вас и свяжет ./regions и ./regions_assembler в единый pipeline, который обрабатывает одни и те же файлы. Однако, на всякий случай, приведу описание конфигов. 
./regions:
[data]
reference_file=файл с гермлайном для одного гена
input_file=файл с ридами для обработки
output_align=blast-like вывод результатов выравнивания. Нигде не используется, но удобен для отладки и анализа. Файл получается очень большой, так что имеет смысл сюда прописывать /dev/null 
output_regions=вывод результатов выравнивания для дальнейшей обработки regions_assembler. Имеет следующий формат:

read1	read2	read1.begin	read1.end	read2.begin	read2.end	mismatches	score
H52AO1A01ALABY	IGLV11-55*01	66	124	8	66	2	86

read1 - это риды из input_file, read2 - это гермлайны из reference_file 

[settings]
max_nthreads=максимальное число потоков для одновременной работы. Больше чем omp_max_threads() выставить не получится.
kmer_size=размер k-мера, который должен быть и в риде и в гермлайне, что бы началось выравнивание. Если ни одного общего k-мера нет, то рид не выравнивается на гермлайн. Если установить kmer_size=1, то выравниваться будут все риды на все гермлайны, но это - очень долгий процесс. Оптимальное значение - 11. Меньше - выравнивание занимает слишком много времени, больше - выравнивается меньше 90% ридов.

Далее идут параметры для алгоритма Smith-Waterman:
match_score=2
mismatch_penalty=2
gap_opening_penalty=3
gap_extending_penalty=1 

./regions_assembler:
[data]
output_file=файл с конечными результатами (разметка рида на все гены)
v_data_file=входной файл с выравниваниями на V гермлайны (то же самое, что output_regions в конфиге ./regions)
d_data_file=то же самое для D генов
j_data_file=то же самое для J генов

**************************************************************************************************************
**************************************************************************************************************
ЗАПУСК PIPELINE:

Весь pipeline запускается скриптом run.sh. Он принимает следующие параметры:
1) Рабочая директория - сюда будут сохранятся результаты вырванивания на гены, которые выдает ./regions, и конечный результат разметки в файле results.txt. РАБОЧАЯ ДИРЕКТОРИЯ УКАЗЫВАЕТСЯ БЕЗ / НА КОНЦЕ!!!
2) Абсолютный путь к файлу с ридами
3-5) Абсолютные пути к файлам с V, D и J гермлайнами в fasta формате (именно в таком порядке). Если какого-то файла нет, то можно написать, например, /dev/null, чтобы позиции остальных файлов в строке с параметрами сохранились неизменными.

Настройки раздела [settings] для ./regions берутся из ./regions/src/config/config.template. Скрипт дописывает к этим настройкам правильные пути к файлам, и запускает ./regions.

Пример запуска ./run.sh находится в скрипте ./example.sh

